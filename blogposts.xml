<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Blogposts - Noah&#39;s Knowledge Graph</title><id>https://packetlost.dev/blogposts.html</id><updated>2021-01-29T18:54</updated><link href="https://packetlost.dev/blogposts.html"/><entry><id>https://packetlost.dev/a8739646.html</id><title type="text">Unstructured Feeds are SO Much Better Than Karma Systems</title><updated>2021-01-29T18:54</updated><content type="html">&lt;p&gt;&lt;img alt=&#34;drowning&#34; class=&#34;ui large centered image&#34; src=&#34;static/nikko-macaspac-6SNbWyFwuhk-unsplash.jpg&#34; /&gt;&lt;/p&gt;&lt;h3 id=&#34;or-why-rss-is-still-relevant-in-2021&#34;&gt;Or, why RSS is still relevant in 2021&lt;/h3&gt;&lt;p&gt;I’d like to preface this by saying, this is what works for &lt;em&gt;me&lt;/em&gt;. I’m not trying to make any broad claims about how terrible your doomscroll inducing social media feed&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; is, just that these small changes I’ve found have had a noticeable impact on my day-to-day browsing habits.&lt;/p&gt;&lt;h2 id=&#34;the-switch&#34;&gt;The Switch&lt;/h2&gt;&lt;p&gt;I stopped browsing my main two sources of tech news directly: &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;HackerNews&lt;/a&gt; and &lt;a href=&#34;https://lobste.rs/&#34;&gt;Lobste.rs&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Instead, I replaced them with a hosted RSS feed aggregator called &lt;a href=&#34;https://miniflux.app/&#34;&gt;Miniflux&lt;/a&gt;. This isn’t the first time I’ve attempted to use an RSS aggregator to manage my news feed, but it is the first that that it’s stuck. The UI is clean, usable, and concise and has support for external clients via the (now aging) Fever API. The external client support allows me to use the &lt;a href=&#34;https://reederapp.com/&#34;&gt;Reeder&lt;/a&gt; app on my phone, should I need to (which isn’t very often these days). Perhaps controversial, but despite being &lt;a href=&#34;https://github.com/miniflux/v2&#34;&gt;free and Open Source&lt;/a&gt; I opted to pay for the hosted version of Miniflux. The developer of Miniflux chooses to do something that I’d like to see more from small open source projects: offer reasonably priced hosting (when applicable and feasible) for their software.&lt;/p&gt;&lt;p&gt;At $15/year, the price is well within reason, and it saves me the headache of setting up yet another &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; instance all while giving some (albeit, small) support to the developer.&lt;/p&gt;&lt;h2 id=&#34;sometimes-more-is-less&#34;&gt;Sometimes More &lt;em&gt;is&lt;/em&gt; Less&lt;/h2&gt;&lt;p&gt;What I found most surprising about switching to a RSS-based news feed was that I notice more news/articles/posts than before. As someone who takes care to maintain &lt;a href=&#34;https://whatis.techtarget.com/definition/inbox-zero&#34;&gt;inbox zero&lt;/a&gt; as much as reasonable, I like to keep the &lt;code&gt;Unread&lt;/code&gt; section of my news feed clean. This means that whenever I check my feed, I generally parse through the titles of each article and decide whether I’m actually interested in reading or not, and mark it as read if I’m not, or click into it if I am&lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;. This process is faster than going to the each individual site and parsing through whatever happens to be on the front page at the time. Another nice property of this is that I don’t have to do this multiple times for the same article, each one shows up in my feed once and only once &lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;. This feeds into another key benefit: being able to keep up to date on more niche and obscure blogs.&lt;/p&gt;&lt;h2 id=&#34;the-give-and-take-of-karma&#34;&gt;The Give and Take of Karma&lt;/h2&gt;&lt;p&gt;Upvote, downvote, star, flag, bookmark, heart, like. Karma systems are a means of crowdsourcing the aggregation and filtering of content. While it’s pretty effective at filtering down &lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn4&#34; id=&#34;fnref4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; content, the bias and distraction introduced by the score and comment counts aren’t really worth it in my opinion. Now, to be clear, karma systems still have an important role and I still use them &lt;em&gt;indirectly&lt;/em&gt;. Because of this, I end up dropping into comments less (despite being just as easy in Miniflux). It overall helps alleviate some distraction in my day, and keeps me more focused on the things I actually care about.&lt;/p&gt;&lt;h2 id=&#34;the-rest&#34;&gt;The Rest&lt;/h2&gt;&lt;p&gt;Unfortunately, it seems RSS (and Atom) have started to fall out of favor. One of my favorite news sites, Reuters, killed their RSS feeds sometime last year; and I still haven’t found a reliable and trustworthy way to get my Reddit feed into RSS &lt;span data-nosnippet=&#34;&#34;&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn5&#34; id=&#34;fnref5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;. Despite this, I a good chunk of blogs and podcast sites still support it, including some other sites that I didn’t expect such as &lt;a href=&#34;https://watchnebula.com/&#34;&gt;Nebula&lt;/a&gt;.&lt;/p&gt;&lt;div id=&#34;footnotes&#34;&gt;&lt;ol&gt;&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Yes, this isn’t really about &lt;em&gt;feeds&lt;/em&gt; necessarily, at least not in the Twitter/Facebook/Instagram sense&lt;/p&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Sometimes I’ll leave articles in my unread if I don’t have time to read them immediately, but generally my inbox is cleared by the end of the day&lt;/p&gt;&lt;a href=&#34;#fnref2&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Excluding articles posted to multiple of my feed sources, or posted multiples times to each source&lt;/p&gt;&lt;a href=&#34;#fnref3&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;to the most controverial, clickbatey&lt;/p&gt;&lt;a href=&#34;#fnref4&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;I’m not really looking for one either, Reddit is more for memes. Don’t @ me&lt;/p&gt;&lt;a href=&#34;#fnref5&#34;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="https://packetlost.dev/a8739646.html"/></entry><entry><id>https://packetlost.dev/blogdrafts.html</id><title type="text">Blog Drafts</title><updated>2020-11-19T14:40</updated><content type="html">&lt;p&gt;Drafts of blog posts to put on my &lt;a href=&#34;https://packetlost.dev&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;posts&#34;&gt;Posts&lt;/h2&gt;&lt;p&gt;Blog posts may also be mirrored here once they’ve been published. Posts that have been published should have the tag &lt;code&gt;blog/published&lt;/code&gt;. Posts that are still in the draft stage should have the tag &lt;code&gt;blog/draft&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;section class=&#34;tag-query-results&#34;&gt;&lt;div class=&#34;ui horizontal divider&#34; title=&#34;Neuron TagQuery&#34;&gt;&lt;span class=&#34;ui basic pointing below black label&#34; title=&#34;Zettels tagged &amp;#39;blog/draft&amp;#39;&#34;&gt;&lt;i class=&#34;tags icon&#34;&gt;&lt;/i&gt;blog/draft&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;ui list listing&#34;&gt;&lt;div class=&#34;item listing-item&#34;&gt;&lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;extra monoFont&#34; data-nosnippet=&#34;&#34;&gt;&lt;time datetime=&#34;2021-02-17T10:53&#34;&gt;2021-02-17&lt;/time&gt; &lt;/span&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;2021-02-17T10:53&#34;&gt;&lt;a href=&#34;072ec590.html&#34;&gt;Advanced Python Type Hierarchies&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;/p&gt;</content><link href="https://packetlost.dev/blogdrafts.html"/></entry><entry><id>https://packetlost.dev/magicobjects.html</id><title type="text">Magic Python Objects</title><updated>2020-09-08T12:00</updated><content type="html">&lt;h2 id=&#34;defining-and-encoding-strict-types-using-bare&#34;&gt;Defining and Encoding Strict Types Using BARE&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1551269901-5c5e14c25df7?ixlib=rb-1.2.1&amp;amp;q=85&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=srgb&amp;amp;ixid=eyJhcHBfaWQiOjYzOTIxfQ&amp;amp;w=3600&#34; /&gt;&lt;/p&gt;&lt;p&gt;Everything in Python is an object, and I mean everything. This includes primitives such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;str&lt;/code&gt; but also includes things you might not expect, such as &lt;code&gt;class&lt;/code&gt; and function definitions. It turns out, that Python has a &lt;em&gt;lot&lt;/em&gt; of flexibility and… weird things you can do with class fields.&lt;/p&gt;&lt;!--more--&gt;
&lt;h2 id=&#34;descriptors---but-what-do-they-describe&#34;&gt;Descriptors - But what do they describe?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;@property&lt;/code&gt;, &lt;code&gt;super()&lt;/code&gt;, and &lt;code&gt;@staticmethod&lt;/code&gt; (and many others) are implemented using an &lt;em&gt;advanced&lt;/em&gt; internal protocol called the descriptor protocol. In short, descriptors are objects that define ‘binding’ behavior in the form of overriding &lt;code&gt;__get__()&lt;/code&gt;, &lt;code&gt;__set__()&lt;/code&gt;, and &lt;code&gt;__delete__()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Without going into detail too on how these functions work, at a basic level they’re invoked whenever a property is set (ex. &lt;code&gt;setattr()&lt;/code&gt;), read (ex. &lt;code&gt;getattr()&lt;/code&gt;), or deleted (ex. &lt;code&gt;del&lt;/code&gt; or &lt;code&gt;delattr()&lt;/code&gt;). The protocol has some nuances to be aware of, I recommend reading the &lt;a href=&#34;https://docs.python.org/3/howto/descriptor.html&#34;&gt;Descriptor HowTo Guide&lt;/a&gt; for more information.&lt;/p&gt;&lt;h2 id=&#34;thats-cool-but-what-can-i-do-with-them&#34;&gt;That’s cool, but what can I do with them?&lt;/h2&gt;&lt;p&gt;As mentioned, common class definition and interaction utilities are created using the descriptor protocol. One more potential use is validation for values being set to a property. The &lt;code&gt;property.setter&lt;/code&gt; decorator provides a method for doing this generically on classes, but what if you want to “statically” define a type for a class member? Well you can do that too! Here’s an example:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;from abc import ABC, abstractmethod
class Field(ABC):

    def __set_name__(self, owner, name):
        # name is the attr name of *this* instance when assigned as a class field on
        # another object
        self.name = name
        # set the value we have wrapped (if any) to name prefixed with an &amp;#39;_&amp;#39; on the owner
        # instance
        setattr(owner, f&amp;quot;_{name}&amp;quot;, self._value)

    def __get__(self, instance, owner=None):
        if instance is None:
            return self
        else:
            return getattr(instance, f&amp;quot;_{self.name}&amp;quot;)

    def __set__(self, instance, value):
        if instance is None:
            raise AttributeError(&amp;quot;Unable to assign value when not attached to object&amp;quot;)
        valid, message = self.validate(value)
        if not valid:
            # defined elsewhere :)
            raise ValidationError(
                f&amp;quot;value is invalid for BARE type {self._type.__class__.__name__}: {message}&amp;quot;
            )
        setattr(instance, f&amp;quot;_{self.name}&amp;quot;, value)

    @abstractmethod
    def validate(self, value) -&amp;gt; typing.Tuple[bool, str]:
        &amp;quot;&amp;quot;&amp;quot;
        Checks whether a give value is valid for the Field&amp;#39;s data type. Returns a tuple of a boolean
        and an optional message for why
        &amp;quot;&amp;quot;&amp;quot;
        return self.__class__._default == None  # This is valid for BareType.Void&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code is a snippet taken from my implementation of the &lt;a href=&#34;https://baremessages.org/&#34;&gt;BARE message encoding protocol&lt;/a&gt; for Python: &lt;a href=&#34;https://sr.ht/~chiefnoah/pybare/&#34;&gt;PyBARE&lt;/a&gt;. It provides a declarative method for defining data containers that can easily be serialized and deserialized to byte streams.&lt;/p&gt;&lt;p&gt;The above defined &lt;code&gt;Field&lt;/code&gt; classes primary purpose is to be subclassed with a specific type definition (all of the native BARE types are provided), and declared as class members on either &lt;code&gt;Struct&lt;/code&gt; objects or some other data container. A simple declaration using some of the native types look like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;class Example(Struct):

    testint = Int()
    teststr = Str()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, both &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Str&lt;/code&gt; are subclasses of &lt;code&gt;Field&lt;/code&gt;. When the above line is &lt;code&gt;import&lt;/code&gt;ed or loaded by the interpreter, &lt;code&gt;Int.__set_name__()&lt;/code&gt; and &lt;code&gt;Str.__set_name__()&lt;/code&gt; are called with the names “testinst” and “teststr” respectively.&lt;/p&gt;&lt;p&gt;Note: even though &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Str&lt;/code&gt; are instances, they do not currently hold real values. You must create an instance of &lt;code&gt;Example&lt;/code&gt; and assign the values for testint and teststr.&lt;/p&gt;&lt;p&gt;Those names are store as instance attributes so when a value is assigned to them through an instance of &lt;code&gt;Example&lt;/code&gt;, the value can be assigned to an internal representation of that value using &lt;code&gt;Field.__set__()&lt;/code&gt;. That’s as easy as you would expect:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;ex = Example()
ex.testint = 2
ex.teststr = &amp;quot;Hello world&amp;quot; # call looks like: Field.__set__(self, ex, &amp;quot;Hello world&amp;quot;)
print(ex.teststr) # &amp;quot;Hello world&amp;quot;
print(ex._teststr) # &amp;quot;Hello world&amp;quot;, the actual value is stored as an instance attribute on ex&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The way the values are stored may seem a bit odd, but it’s necessary to prevent multiple instances of &lt;code&gt;Example&lt;/code&gt; from sharing values, given that the &lt;code&gt;testint&lt;/code&gt; and &lt;code&gt;teststr&lt;/code&gt; instances are class fields.&lt;/p&gt;&lt;p&gt;You may have noticed this peculiar line:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;    def __get__(self, instance, owner=None):
        if instance is None:
            return self&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;__get__()&lt;/code&gt; method of &lt;code&gt;Field&lt;/code&gt; checks if &lt;code&gt;instance&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; and returns itself if it is… huh??&lt;/p&gt;&lt;p&gt;This may seem unintuitive, but what it does is allows the &lt;code&gt;Field&lt;/code&gt; to be accessed as it’s instance (not it’s wrapped value) when accessed as a &lt;em&gt;class attribute&lt;/em&gt;. To clarify:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;ex = Example(testint=1, teststr=&amp;quot;hello&amp;quot;)
ex.testint # 1
Example.testint # &amp;lt;bare.Int object at ...&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This mimics “shadowing” behavior on the instance vs class versions of the attribute and is particularly helpful when serializing because you can simply call &lt;code&gt;self.__class__.testint.pack(self.testint)&lt;/code&gt; to pack the value.&lt;/p&gt;&lt;p&gt;So what’s with that &lt;code&gt;validate&lt;/code&gt; method?&lt;/p&gt;&lt;p&gt;Well, one of the primary goals for PyBARE was to provide validation as early as possible. Most serializers wait until a method is called to serialize a data-structure to validate it. I’m of the opinion that if you’re going through the trouble to explicitly define what is and isn’t a valid value, you should error as soon as possible. Invalid data is always invalid. Yes, this may seem a bit antithetical to Python’s duck-typing system, but when you have sufficiently complex data containers with strict typing requirements (and your physicist coworkers are married to &lt;code&gt;numpy&lt;/code&gt;), you do what you can.&lt;/p&gt;&lt;p&gt;So what happens when you try to do something that doesn’t fit in a data type? A &lt;code&gt;bare.ValidationError&lt;/code&gt; is raised!&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;ex = Example()
ex.testint = &amp;quot;1&amp;quot; # raises: ValidationError
ex.teststr = 1 # raises: ValidationError&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you absolutely &lt;em&gt;must&lt;/em&gt; set one of these values to something that doesn’t pass validation, you can always directly set the internal values:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;ex._testint = &amp;quot;1&amp;quot; # no validation&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively, you can define your own &lt;code&gt;Field&lt;/code&gt; type and &lt;code&gt;validation&lt;/code&gt; method to do your own validation:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;class IntStr(Str):
    def validate(self, value) j-&amp;gt; Tuple[bool, str]:
        if not isinstance(value, (int, str)):
            return False, f&amp;quot;Wrote type: {type(value)} must be &amp;lt;str&amp;gt; or &amp;lt;int&amp;gt;&amp;quot;
        return True, None&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will fail if you try to serialize it, you must also define a &lt;code&gt;_pack&lt;/code&gt; method in order to support both &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; types. This is considered an “advanced” usage of the library, I recommend looking at &lt;a href=&#34;https://git.sr.ht/~chiefnoah/pybare/tree/master/bare/types.py&#34;&gt;types.py&lt;/a&gt; for how this is done internally and imitating how it is done there.&lt;/p&gt;&lt;p&gt;The native BARE types should cover most needs, so you shouldn’t need to define your own validation.&lt;/p&gt;&lt;p&gt;This is a serialization library… right? Well, yeah… but serialization is actually secondary to being able to concretely define types and structures for a non-self-describing protocol such as BARE.&lt;/p&gt;&lt;p&gt;PyBARE puts an emphasis on streaming (unlike most Python libraries, as I’ve found). Though it’s optional, you can provide a &lt;code&gt;BytesIO&lt;/code&gt; object or similar (such as a file-like object opened in binary/b mode) to a &lt;code&gt;Struct&lt;/code&gt;s &lt;code&gt;pack()&lt;/code&gt; method, and it will write the bytes directly to that stream like so:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;python language-python&#34;&gt;ex = Example(teststr=&amp;quot;Hello world&amp;quot;, testint=3)
buffer = io.BytesIO()
ex.pack(fp=buffer) # writes output directly to buffer
buffer.seek(0) # reset the buffer so we can read from it
#now unpack
unpacked = ex.unpack(buffer)
unpacked.testint # 3
unpacked.teststr # &amp;quot;Hello world&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you don’t want to use streaming, you can omit the &lt;code&gt;fp&lt;/code&gt; kwarg for &lt;code&gt;pack&lt;/code&gt; and it will directly return the encoded &lt;code&gt;bytes&lt;/code&gt;. For &lt;code&gt;unpack&lt;/code&gt;, a &lt;code&gt;bytes&lt;/code&gt;-like can be passed in and it will behave the same.&lt;/p&gt;&lt;p&gt;The primary benefit to streaming, aside from potentially better use of memory, is you can repeatedly serialize and deserialize messages on the same stream. This makes it easy to implement simple RPCs over pipes or other sockets or write many messages in an efficient manner.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;This has only been a surface-level overview of what PyBARE can do. If you’d like to learn more, I encourage you to look at the several examples in &lt;a href=&#34;https://git.sr.ht/~chiefnoah/pybare/tree/master/bare/test_encoder.py&#34;&gt;tests for the library&lt;/a&gt; as well as &lt;a href=&#34;https://baremessages.org/&#34;&gt;official spec for BARE.&lt;/a&gt; Patches and feature requests are welcome!&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pybare/&#34;&gt;PyBARE is available on PyPi.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thanks for reading! If you have any questions or comments, shoot me an email at &lt;a href=&#34;mailto:noah@packetlost.dev&#34;&gt;&lt;a href=&#34;mailto:noah@packetlost.dev&#34;&gt;noah@packetlost.dev&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;</content><link href="https://packetlost.dev/magicobjects.html"/></entry><entry><id>https://packetlost.dev/terminaljockey.html</id><title type="text">The Terminal Jockey’s Toolbelt</title><updated>2020-08-05T12:00</updated><content type="html">&lt;p&gt;How much do you think software &lt;span&gt;&lt;code class=&#34;inline-tag&#34;&gt;#development&lt;/code&gt;&lt;/span&gt; has changed over the last 20 years? Many would say quite a bit. But, my opinion is that fundamentally not much has really changed. Many of us still use the tried and true method of telling a computer what to do: the terminal. While the &lt;span&gt;&lt;code class=&#34;inline-tag&#34;&gt;#terminal&lt;/code&gt;&lt;/span&gt; has changed it’s appearance a bit over the years, it’s still fundamentally the same tool it was 50 years ago. But the terminal is really only the window, and the tools we use through it &lt;em&gt;have&lt;/em&gt; changed over the years. At least for some of us. As someone who spends most of his day bashing away at my clicky mechanical keyboard, I’d like to share some of the modern tools that I use to do my job, many of which replace commonly installed *nix tools.&lt;/p&gt;&lt;!--more--&gt;
&lt;p&gt;I’m always looking to improve and integrate new tools into my workflow. If you have any suggestions, feel free to email me at the address at the bottom of this post or message me on &lt;a href=&#34;https://twitter.com/chiefnoah13&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;&lt;hr /&gt;&lt;h2 id=&#34;hot-reload-all-the-things&#34;&gt;🔥Hot🔥 Reload All the Things&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://eradman.com/entrproject/&#34;&gt;entr(1)&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Edit → Compile → Test → Edit → Compile → Test → Edit → Compile → Test&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Have you ever found yourself in a loop of editing a file, executing/compiling it over and over and over again? Well here’s the solution to your &lt;em&gt;home row →&lt;/em&gt; ⬆️ RSI.&lt;/p&gt;&lt;p&gt;Well repeat no more! Enter &lt;code&gt;entr&lt;/code&gt;, stage left. &lt;code&gt;entr&lt;/code&gt; is a fairly simple command line utility that will execute a command whenever a file or list of files change. When combined with a utility like &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; it becomes insanely powerful.&lt;/p&gt;&lt;p&gt;Some examples of what I use it for:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;bash language-bash&#34;&gt;fd &amp;quot;.+\.py&amp;quot; | entr python -m pytest some_test.py
fd -g &amp;quot;*.go&amp;quot; | entr -r go run cmd/server.go&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My day job is primarily python, so a common use-case for me is in a &lt;code&gt;:term&lt;/code&gt; using &lt;code&gt;neovim&lt;/code&gt; with a similar command to run tests automatically after each file save, and similar for compiled languages such as Go.&lt;/p&gt;&lt;p&gt;Another common one is when developing a web server application. For example, in Go I use a command similar to the following:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;bash language-bash&#34;&gt;fd -g &amp;quot;*.go&amp;quot; | entr -r sh -c &amp;quot;go build cmd/server.go -o server &amp;amp;&amp;amp; ./server&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This rebuilds and runs the server after every file change. The &lt;code&gt;-r&lt;/code&gt; flag sends a SIGINT to the process when a file change is detected, and then re-executes the command. Pretty neat, right?&lt;/p&gt;&lt;p&gt;It’s worth calling out that this is a common feature in many IDEs. As an occasional user of PyCharm, I’ve used the built-in equivalent to achieve the same result. However, I prefer to work in vim, so this fills that role for me.&lt;/p&gt;&lt;h2 id=&#34;what-was-that-flag-again&#34;&gt;What was that flag again?&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd(1)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;find&lt;/code&gt; has been a long-time tool for *nix users. But for someone who hasn’t gotten used to the esoteric syntax of &lt;code&gt;find&lt;/code&gt;, or is looking for something that requires typing a bit less (among many other really nice features), look no further than &lt;code&gt;fd&lt;/code&gt;. You may have noticed I use &lt;code&gt;fd&lt;/code&gt; in my previous example, &lt;code&gt;entr&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I typically prefer glob patterns to regex for quick searches, so most of the time I add a &lt;code&gt;-g&lt;/code&gt; to my commands to enable glob mode.&lt;/p&gt;&lt;p&gt;One of the areas that &lt;code&gt;fd&lt;/code&gt; really shines is an improved templating syntax for the &lt;code&gt;--exec&lt;/code&gt; / &lt;code&gt;-e&lt;/code&gt; flag. The main GitHub readme has some pretty solid examples, so be sure to check out their &lt;a href=&#34;https://github.com/sharkdp/fd/blob/master/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;the-silver-searcher&#34;&gt;The Silver Searcher&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;ag(1)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;My life was changed the day I learned aboug &lt;code&gt;grep -r&lt;/code&gt;. Recursively searching for text in a codebase is easily one my most common daily tasks. For my day job, we have… a &lt;em&gt;lot&lt;/em&gt; of files, some rather large. The Silever Searcher, or just &lt;code&gt;ag&lt;/code&gt; (the atomic symbol for Silver 🙂) is a simple replacement for &lt;code&gt;grep -r&lt;/code&gt; that’s more performant and has nice ANSI color coding in the terminal. The syntax is pretty similar to &lt;code&gt;grep&lt;/code&gt; so it makes for a good drop-in replacement to speed up your workflow by those &lt;em&gt;crucial&lt;/em&gt; few milliseconds.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://i.snap.as/U2HscOd.png&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;all-things-old-are-new-again-and-with-lua&#34;&gt;All things old are new again, and with Lua&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;nvim(1)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;nvim&lt;/code&gt; is a fork of the infamous &lt;code&gt;vim&lt;/code&gt; project. Much of the project has focused on cleaning up the codebase, adding async support (which was subsequently added to &lt;code&gt;vim&lt;/code&gt; for version 8), and Lua as a first-class language. The Lua API in particular allows for more robust and easy to maintain plugins (in theory). That being said, I’m not big on diving deep into customizing my editor, though I’ve made several shortcuts and rely on a handful of plugins. I generally tend to focus on memorizing the default keybindings so when moving from system to system I don’t have to unlearn or mess up text entry. Check out my &lt;a href=&#34;https://git.sr.ht/~chiefnoah/dotfiles/tree/master/dotfiles/config/nvim/init.vim&#34;&gt;dotfiles&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;Regardless of which editor you use on the daily, it’s worth learning the basics of &lt;code&gt;vim&lt;/code&gt;, it’s available on nearly every Linux or Unix system and is particularly fantastic at making quick edits to config files.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://i.snap.as/JyqcvJ8.png&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;email-for-the-20th-century&#34;&gt;Email for the 20th century&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://aerc-mail.org/&#34;&gt;aerc(1)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;aerc&lt;/code&gt; is one of &lt;a href=&#34;https://drewdevault.com/&#34;&gt;Drew DeVault&lt;/a&gt;&amp;#39;s projects, and was originally built to suit his particular workflow. Despite this, it’s actually a really nice modern implementation of an IMAP4/SMTP/POP3 client for the terminal (provided you primarily use &lt;code&gt;text/plain&lt;/code&gt;). It’s far more intuitive than &lt;code&gt;mutt&lt;/code&gt; or other alternatives that I’ve tried, and it’s &lt;strong&gt;fast&lt;/strong&gt;. Well, usually. I’ve noticed some minor performance issues with a high latency connection to the mail server, but overall the experience is fantastic and it’s my client of choice for email.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://i.snap.as/GjcsDLV.png&#34; /&gt;&lt;/p&gt;&lt;h2 id=&#34;markdown-rendering-in-the-terminal&#34;&gt;Markdown rendering… in the terminal!?&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/MichaelMure/mdr&#34;&gt;mdr(1)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Have you ever been working on a &lt;code&gt;README.md&lt;/code&gt; and somehow forgotten that you need a double newline for it to actually render properly in markdown? I know I have way more than is reasonable for someone in my profession. Well to help with markdown rendering woes, &lt;code&gt;mdr&lt;/code&gt; renders markdown with color highlighting and rich text formatting! It even tries to render images!&lt;/p&gt;&lt;p&gt;Given that not all of markdown’s output format (typically HTML) is compatible with rendering to a terminal, it does make some compromises, but I’ve found it’s fine 99% of the time.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://i.snap.as/1KPbMlA.png&#34; /&gt;&lt;/p&gt;&lt;p&gt;For comparison on what this looks like rendered to HTML, check out that project’s &lt;a href=&#34;https://git.sr.ht/~chiefnoah/origin/tree/master/README.md&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;honorable-mentions&#34;&gt;Honorable Mentions&lt;/h2&gt;&lt;p&gt;Some other tools that I like to use when appropriate, but I didn’t feel like including in the main list:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/apenwarr/redo&#34;&gt;&lt;code&gt;redo(1)&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;make&lt;/code&gt; but much, &lt;em&gt;much&lt;/em&gt; better&lt;ul&gt;&lt;li&gt;I prefer this to &lt;code&gt;make&lt;/code&gt; as it lacks some of the strange formatting quirks of the Makefile, and it is generally easier to work with and understand&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;&lt;code&gt;tmux(1)&lt;/code&gt;&lt;/a&gt; - terminal multiplexing, who needs a desktop?&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://tldr.sh/&#34;&gt;&lt;code&gt;tldr(1)&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;man&lt;/code&gt; pages quick reference&lt;ul&gt;&lt;li&gt;I don’t actually use this one as much yet, I just haven’t integrated it into my workflow, but I appreciate the project and likely will get to it eventually&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;code&gt;ripgrep&lt;/code&gt;/&lt;code&gt;rg(1)&lt;/code&gt;&lt;/a&gt; - similar to &lt;code&gt;ag(1)&lt;/code&gt;, a faster more modern &lt;code&gt;grep -r&lt;/code&gt; command&lt;ul&gt;&lt;li&gt;This one was added based on feedback. I don’t use it, but many seem to prefer it&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;Thanks for reading! If you have any questions or comments, shoot me an email at &lt;a href=&#34;mailto:noah@packetlost.dev&#34;&gt;&lt;a href=&#34;mailto:noah@packetlost.dev&#34;&gt;noah@packetlost.dev&lt;/a&gt;&lt;/a&gt; or &lt;a
href=&#34;https://twitter.com/intent/tweet?screen_name=chiefnoah13&amp;ref_src=twsrc%5Etfw&#34;
class=&#34;twitter-mention-button&#34; data-show-count=&#34;false&#34;&gt;Tweet to @chiefnoah13&lt;/a&gt;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</content><link href="https://packetlost.dev/terminaljockey.html"/></entry><entry><id>https://packetlost.dev/goalpost.html</id><title type="text">Goalpost</title><updated>2020-06-01T12:00</updated><content type="html">&lt;h2 id=&#34;a-durable-embeddable-worker-queue-for-golang&#34;&gt;a durable, embeddable, worker queue for golang&lt;/h2&gt;&lt;h5 id=&#34;original-article&#34;&gt;&lt;a href=&#34;http://tilde.club/~ngp/blob/posts/goalpost/&#34;&gt;Original article&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;One thing that has always stuck out to me about the Go programming language is it’s incredibly strong concurrency model. Go is aggressively simple as a language, and it’s asynchronous architecture is no different. Channels are a beautiful implementation of a buffered FIFO queue which have an infinite number of applications. There’s no &lt;code&gt;Thread&lt;/code&gt; classes, just a simple &lt;code&gt;go&lt;/code&gt; in front of a function call. It’s great! You can probably tell, but I enjoy working with Go a lot.&lt;/p&gt;&lt;p&gt;With that, I’d like to introduce a small side-project of mine. I call it &lt;a href=&#34;https://github.com/chiefnoah/goalpost/blob/master/queue.go&#34;&gt;goalpost&lt;/a&gt;. It’s a simple, embeddable, worker queue library. It seeks to be a simple way to reliably do &lt;em&gt;work&lt;/em&gt; in uncertain runtime environments.&lt;/p&gt;&lt;!--more--&gt;
&lt;h2 id=&#34;whats-a-work-queue&#34;&gt;What’s a work queue?&lt;/h2&gt;&lt;p&gt;Work or job queues are a way of reliably executing a task in an asyncronous manner. This idea is that when you push a message onto the queue, one or more workers can pick up the message and begin acting on it, typically in a different process or thread. One of the most popular worker queue implementations is &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;. RabbitMQ is incredibly mature and robust, and one of the most widely used queue systems in the world. It supports durability, permissions, federation, and many other advanced features. There are many other queues (&lt;a href=&#34;https://redis.io/&#34;&gt;redis&lt;/a&gt;, for example, can be used as a queue), RabbitMQ is just &lt;em&gt;one&lt;/em&gt; of the many out there.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If RabbitMQ is so great, why did you make goalpost?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Good question! You see, while RabbitMQ is great, it’s a little on the heavy side and requires a fair bit of setup. Further, it requires binding to a TCP port in order to work. While that’s &lt;em&gt;usually&lt;/em&gt; not much of a problem, there are scenarios when that’s undesirable or not even an option.&lt;/p&gt;&lt;p&gt;Goalpost started as part of another project (which isn’t open source, sorry!), but was designed in a way that it was easy to rip out and turn into it’s own external dependency for the project.&lt;/p&gt;&lt;p&gt;The service was intended to be run on a Linux system where binding to a TCP port wasn’t an option, and the server could restart at almost any point. The existing system, written as a combination of bash and python scripts, worked but was susceptible to failing ungracefully when the server rebooted, and worse, wouldn’t retry when the server came back up. This means that jobs could get “lost” and never finish execution. Ultimately, this resulted in little more than a minor inconvenience for me, but I wanted the whole thing to be completely hands-off as much as possible.&lt;/p&gt;&lt;h2 id=&#34;exploration&#34;&gt;Exploration&lt;/h2&gt;&lt;p&gt;Initially, I looked into other options. Like any good developer, I’m lazy and don’t want to rewrite something someone has already done. Ok, part of me really wanted to try writing a queue, but if it already existed I would’ve taken the lazy path 🙃&lt;/p&gt;&lt;p&gt;There were a few projects that came close to what I needed, but didn’t have everything I was looking for.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/beeker1121/goque&#34;&gt;goque&lt;/a&gt; seemed promising, but it doesn’t actually implement a work queue, and it seems the project is dead (last commit was 3 years ago).&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/joncrlsn/dque&#34;&gt;dque&lt;/a&gt; was another one I looked at. I actually like dque a lot, but again, not a worker queue. I considered trying to modify it it and add worker queue, but after looking through the code, decided it would probably be easier to just start a new project.&lt;/p&gt;&lt;p&gt;This wonderful post on OpsDash on &lt;a href=&#34;https://www.opsdash.com/blog/job-queues-in-go.html&#34;&gt;Job Queues in Go&lt;/a&gt; was super helpful, but lacked durability, given that it relies entirely on go channels.&lt;/p&gt;&lt;p&gt;If there were other options, they certainly made themselves hard to find!&lt;/p&gt;&lt;h2 id=&#34;choosing-a-storage-backend&#34;&gt;Choosing a storage backend&lt;/h2&gt;&lt;p&gt;One of the primary goals of goalpost was to be able to survive un-expected restarts, and also shutdown gracefully when possible. As such, it needs a way of persisting jobs to disk.&lt;/p&gt;&lt;p&gt;Go has several projects that seek to handle everything from in-memory, embedded SQL engines, to persistent, fast, key-value stores. Etcd, a popular distributed key-value store, is backed by a forked version of boltdb. The &lt;a href=&#34;https://github.com/boltdb/bolt&#34;&gt;original project&lt;/a&gt; was set to read-only awhile ago, and was subsequently forked by the etcd project to continue adding new features as the etcd needed. Both would work, as the interface and practical use-case is the same for both, so I went with etcd’s fork: bbolt.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Key-value stores aren’t a great way to do queues&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You’re probably right, but when combined with a buffered notifications system, they can get the job done well enough. An embedded SQL engine would’ve been overkill for this, and I didn’t want to write my own storage backend. Lazy, remember?&lt;/p&gt;&lt;h2 id=&#34;writing-some-code&#34;&gt;Writing some code…&lt;/h2&gt;&lt;p&gt;I’m not going to go into too much detail on my process for writing goalpost, mostly because it’s been months since I originally wrote it. It lived for awhile as part of that other project, until I finally got the motivation to rip it out and properly document everything.&lt;/p&gt;&lt;p&gt;One of the first things I did was define the &lt;code&gt;Job&lt;/code&gt; struct and the &lt;code&gt;JobStatus&lt;/code&gt; constant types. I wanted to get the basics of what state the jobs could be in out of the way first. It ended up working out pretty well, as the only fields that were added to &lt;code&gt;Job&lt;/code&gt; was the &lt;code&gt;Message&lt;/code&gt; field, and nothing was added to &lt;code&gt;JobStatus&lt;/code&gt;. I &lt;em&gt;did&lt;/em&gt; reference parts of the documentation for RabbitMQ’s worker model, which helped with the &lt;code&gt;JobStatus&lt;/code&gt; definitions, with my implementation being a subset of RabbitMQ’s job states with some modifications to the semantics. There may be room for a new state such as &lt;code&gt;new&lt;/code&gt; to better indicate that a job has not been started by a worker at all yet, but as of right now it’s not strictly needed.&lt;/p&gt;&lt;p&gt;The possible job states are as follows:&lt;/p&gt;&lt;p&gt;&lt;code&gt;uack&lt;/code&gt; - This is the original state a job is in when it’s pushed to the queue. The meaning is “unacknowledged”, meaning the job has not been completed yet. Workers &lt;em&gt;do&lt;/em&gt; update the state, but it’s to &lt;code&gt;uack&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;nack&lt;/code&gt; - This is similar to the AMQP extension, except it simply means “job processing failed, but should put back on the queue and retried”&lt;/p&gt;&lt;p&gt;&lt;code&gt;ack&lt;/code&gt; - The basic ‘acknowledged’ state. This means a job has completed processing and should not be re-attempted. “Completed”&lt;/p&gt;&lt;p&gt;&lt;code&gt;failed&lt;/code&gt; - Indicates a hard failure in the job. An unrecoverable error, and the job should not be reattempted.&lt;/p&gt;&lt;p&gt;It’s worth pointing out that the workers &lt;code&gt;DoWork&lt;/code&gt; function should &lt;em&gt;never&lt;/em&gt; modify the job status themselves. Doing so could potentially caused undefined behavior.&lt;/p&gt;&lt;h3 id=&#34;creating-a-queue-registering-workers-and-looping-forever&#34;&gt;Creating a queue registering workers and looping forever&lt;/h3&gt;&lt;p&gt;Creating a queue is pretty easy. You call &lt;code&gt;goalpost.Init(queueID)&lt;/code&gt; with a unique id for the queue, which is used to initialize or open the database. A WaitGroup and a chan are created for handling shutdown and job events. Once a queue is initialized, you need to register a worker in order to start processing jobs.&lt;/p&gt;&lt;p&gt;When a worker is registered, the queue does some setup that allows it to keep track of workers. It then executes the main poll loop with the worker in a separate goroutine, sleeping for 500 milliseconds (now configurable in &lt;code&gt;Queue&lt;/code&gt;) after checking to either shut down or work a job. Context.context can be used to signal to your &lt;code&gt;DoWork&lt;/code&gt; function that the queue has received a signal to stop, and it should make an attempt to exit early.&lt;/p&gt;&lt;p&gt;When &lt;code&gt;PushBytes&lt;/code&gt; is called, a &lt;code&gt;Job&lt;/code&gt; is created and written to the boltdb database, then a notification with the resuling JobID is sent to the chan that was created when the queue was initialized. A worker reads from the chan, receiving the JobID, which it then reads from the database for processing.&lt;/p&gt;&lt;p&gt;When a job is marked as &lt;code&gt;ack&lt;/code&gt;ed or &lt;code&gt;failed&lt;/code&gt;, the job gets moved to a second bucket, which is purely used for reference. This also should help with performance in certain scenarios, such as when trying to resume uncompleted jobs where the entire bucket is scanned for &lt;code&gt;uack&lt;/code&gt;ed jobs.&lt;/p&gt;&lt;h3 id=&#34;using-goalpost&#34;&gt;Using goalpost&lt;/h3&gt;&lt;p&gt;Goalpost seeks to be an easy to use. How easy? Well I think it’s pretty easy, but you decide how easy it is for yourself.&lt;/p&gt;&lt;p&gt;First, you need to of course import the goalpost package:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;golang language-golang&#34;&gt;import &amp;quot;git.packetlostandfound.us/chiefnoah/goalpost&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Too slow? Ok fine, here’s a basic implementation for a Worker. This is basically copy pasted from &lt;a href=&#34;https://github.com/chiefnoah/goalpost/blob/master/examples/basic.go&#34;&gt;the example&lt;/a&gt;, but I’ll include it here for redundancy’s sake:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;golang language-golang&#34;&gt;type worker struct {
	id string
}

func (w *worker) ID() string {
	return w.id
}

func (w *worker) DoWork(ctx context.Context, j *goalpost.Job) error {
	//do something cool!
	fmt.Printf(&amp;quot;Hello, %s\n&amp;quot;, j.Data)
	//Something broke, but we should retry it...
	if j.RetryCount &amp;lt; 9 { //try 10 times
		return goalpost.NewRecoverableWorkerError(&amp;quot;Something broke, try again&amp;quot;)
	}

	//Something *really* broke, don&amp;#39;t retry
	//return errors.New(&amp;quot;Something broke, badly&amp;quot;)

	//Everything&amp;#39;s fine, we&amp;#39;re done here
	return nil
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can do whatever you want in the DoWork function. It’s executed in a separate goroutine from the main thread, so keep that in mind if you’re interacting with things outside of the worker thread. I recommend storing configuration and shared types (like a database connection) in the type that implements the Worker interface, in this case, the &lt;code&gt;worker&lt;/code&gt; struct.&lt;/p&gt;&lt;p&gt;Now is probably a good time to talk about error handling. Errors returned from the DoWork function can be of two types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;goalpost.RecoverableWorkerError&lt;/code&gt;&lt;/li&gt;&lt;li&gt;everything else&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;goalpost.RecoverableWorkerError&lt;/code&gt; is used to indicate a temporary failure, for example a timeout on a web request. When the queue receives an error of that type from a &lt;code&gt;DoWork&lt;/code&gt; function, it increments the &lt;code&gt;Jon.RetryCount&lt;/code&gt;, marks the job as &lt;code&gt;nack&lt;/code&gt;ed, and pushes the event back onto the queue. If there are workers available to process the job, it will be processed again immediately. It’s recommended that you check &lt;code&gt;Job.RetryCount&lt;/code&gt; when returning &lt;code&gt;RecoverableWorkerError&lt;/code&gt;s, as failing to do so could result in a job being retried infinitely. Maybe that’s what you want? But chances are it’s &lt;strong&gt;not&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Next up is initializing the &lt;code&gt;Queue&lt;/code&gt; and registering a worker:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;golang language-golang&#34;&gt;func main() {

	//Init a queue
	q, _ := goalpost.Init(eventQueueID)
	//remember to handle your errors :)

	//Create a worker with id &amp;quot;worker-id&amp;quot;
	w := &amp;amp;worker{
		id: &amp;quot;worker-1&amp;quot;,
	}
	//register the worker, so it can do work
	q.RegisterWorker(w)

	//Let&amp;#39;s do some work...
	q.PushBytes([]byte(&amp;quot;World&amp;quot;))
	//You should see &amp;quot;Hello, World&amp;quot; printed 10 times

	//Make sure your process doesn&amp;#39;t exit before your workers can do their work
	time.Sleep(10 * time.Second)

	//Remember to close your queue when you&amp;#39;re done using it
	q.Close()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can initialize a queue from anywhere, here we do it in &lt;code&gt;main&lt;/code&gt; for simplicity. The &lt;code&gt;Queue&lt;/code&gt; type is thread safe, but you &lt;em&gt;cannot&lt;/em&gt; have multiple instances of a &lt;code&gt;Queue&lt;/code&gt; with the same ID/filepath. This is a limitation of boltdb/bbolt. Attempts to initialize a second queue with the same database file will result in errors.&lt;/p&gt;&lt;p&gt;Once you have a queue initialized, you need to create an instance of your &lt;code&gt;Worker&lt;/code&gt; type and register it with the queue with the &lt;code&gt;RegisterWorker&lt;/code&gt; method. You can register the same worker instance multiple times, but logging will report the same ID, and you must be mindful of shared resources in &lt;code&gt;*w&lt;/code&gt;. I recommend creating multiple instances of your worker type and registering each once.&lt;/p&gt;&lt;p&gt;With some workers watching the queue, you can now push data into the queue for processing. In the example, we only push a byte encoded string, but any &lt;code&gt;[]byte&lt;/code&gt; will work. For my application, I use &lt;code&gt;encoding/gob&lt;/code&gt; to pass whole structs to my worker.&lt;/p&gt;&lt;p&gt;Another thing to remember is that you need to keep your main process alive. If &lt;code&gt;main&lt;/code&gt; exits, the goroutines with your workers will receive a signal to shutdown, and may leave unprocessed jobs in the queue. There currently is no way to see if there are jobs that haven’t been started, though such a feature could be implemented if the need arises.&lt;/p&gt;&lt;p&gt;I use the following snippet followed by a eternally blocking &lt;code&gt;http.ListenAndServe&lt;/code&gt; call to gracefully shutdown the queue:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;golang language-golang&#34;&gt;
c := make(chan os.Signal)
signal.Notify(c, os.Interrupt, syscall.SIGTERM)
signal.Notify(c, os.Interrupt, syscall.SIGINT)
go func() {
	&amp;lt;-c
	log.Printf(&amp;quot;Closing queue...&amp;quot;)
	q.Close()

	os.Exit(0)
}()&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;closing-things-out&#34;&gt;Closing things out&lt;/h3&gt;&lt;p&gt;I had a lot of fun writing this little library, and I hope someone else can find it useful! It’s my first library that I’m opening up to the public, so things may be a little rough. As always, feel free to shoot me an email at noah &lt;strong&gt;at&lt;/strong&gt; packetlost.dev with feedback or patches. Pull requests on GitHub also welcome!&lt;/p&gt;&lt;p&gt;Oh, and remember to call &lt;code&gt;.Close()&lt;/code&gt;&lt;/p&gt;</content><link href="https://packetlost.dev/goalpost.html"/></entry></feed>